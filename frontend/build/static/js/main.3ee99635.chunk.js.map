{"version":3,"sources":["actions/mainActions.js","constants.js","components/ShowDataComponent.js","components/CountryFormComponent.js","components/NavbarComponent.js","screens/CountryScreen.js","components/GlobalFormComponent.js","screens/GlobalScreen.js","screens/ContinentScreen.js","screens/HomeScreen.js","App.js","reportWebVitals.js","store.js","reducers/mainReducer.js","index.js"],"names":["getCountryData","country","dispatch","a","axios","get","data","type","payload","getContinentData","continent","clearDataFromState","countries","plotWhat","plotType","mapping","continents","color_config","ShowDataComponent","content","dataType","c","divStyles","backgroundColor","color","width","display","flexDirection","height","borderRadius","marginRight","boxShadow","className","first_new_cases_date","replace","maximum","max_new_cases_date","total","first_new_deaths_date","max_new_deaths_date","style","heading","alignItems","justifyContent","CountryFormComponent","isCountry","initial","useState","setC","pws","setPws","pts","setPts","cArray","setCArray","setCountry","plotWhatState","setPlotWhatState","plotTypeState","setPlotTypeState","showImage","setShowImage","windowWidth","window","innerWidth","useDispatch","useSelector","state","submitHandler","e","preventDefault","length","console","log","toLowerCase","pushToArrayC","target","value","popFromArrayC","filter","innerText","imageStyle","join","s","i","useEffect","onSubmit","htmlFor","onChange","map","index","cont","p","c1","id","padding","onClick","marginBottom","margin","toUpperCase","src","alt","Object","keys","k","withRouter","match","to","url","CountryScreen","GlobalFormComponent","innerHeight","GlobalScreen","ContinentScreen","HomeScreen","figJson","setFigJson","fetchData","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ee99635.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const getCountryData = (country) => async (dispatch) => {\r\n    const { data } = await axios.get(`/api/getdata/country/${country}`)\r\n\r\n    dispatch({\r\n        type: 'COUNTRY_DATA_REQUEST',\r\n        payload: data\r\n    })\r\n}\r\n\r\nexport const getContinentData = (continent) => async (dispatch) => {\r\n    const { data } = await axios.get(`/api/getdata/continent/${continent}`)\r\n\r\n    dispatch({\r\n        type: 'CONTINENT_DATA_REQUEST',\r\n        payload: data\r\n    })\r\n}\r\n\r\n\r\nexport const getGlobalData = () => async (dispatch) => {\r\n    const { data } = await axios.get(`/api/getdata/global/`)\r\n\r\n    dispatch({\r\n        type: 'GLOBAL_DATA_REQUEST',\r\n        payload: data\r\n    })\r\n}\r\n\r\n\r\nexport const clearDataFromState = () => async (dispatch) => {\r\n    dispatch({\r\n        type: 'CLEAR_DATA_FROM_STATE'\r\n    })\r\n}","export const countries = ['Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia (Plurinational State of)', 'Bonaire, Sint Eustatius and Saba', 'Bosnia and Herzegovina', 'Botswana', 'Bouvet Island', 'Brazil', 'British Indian Ocean Territory', 'British Virgin Islands', 'Brunei Darussalam', 'Bulgaria', 'Burkina Faso', 'Burundi', 'Cabo Verde', 'Cambodia', 'Cameroon', 'Canada', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile', 'China', 'China, Hong Kong Special Administrative Region', 'China, Macao Special Administrative Region', 'Christmas Island', 'Cocos (Keeling) Islands', 'Colombia', 'Comoros', 'Congo', 'Cook Islands', 'Costa Rica', 'Croatia', 'Cuba', 'Curaçao', 'Cyprus', 'Czechia', 'Côte d’Ivoire', \"Democratic People's Republic of Korea\", 'Democratic Republic of the Congo', 'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Eswatini', 'Ethiopia', 'Falkland Islands (Malvinas)', 'Faroe Islands', 'Fiji', 'Finland', 'France', 'French Guiana', 'French Polynesia', 'French Southern Territories', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti', 'Heard Island and McDonald Islands', 'Holy See', 'Honduras', 'Hungary', 'Iceland', 'India', 'Indonesia', 'Iran (Islamic Republic of)', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jersey', 'Jordan', 'Kazakhstan', 'Kenya', 'Kiribati', 'Kuwait', 'Kosovo[1]', 'Kyrgyzstan', \"Lao People's Democratic Republic\", 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia (Federated States of)', 'Monaco', 'Mongolia', 'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar', 'Namibia', 'Nauru', 'Nepal', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'North Macedonia', 'Northern Mariana Islands (Commonwealth of the)', 'Norway', 'Oman', 'Pakistan', 'Palau', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Pitcairn Islands', 'Poland', 'Portugal', 'Puerto Rico', 'Qatar', 'Republic of Korea', 'Republic of Moldova', 'Romania', 'Russian Federation', 'Rwanda', 'Réunion', 'Saint Barthélemy', 'Saint Helena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin', 'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Sark', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Sint Maarten (Dutch part)', 'Slovakia', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia and the South Sandwich Islands', 'South Sudan', 'Spain', 'Sri Lanka', 'State of Palestine', 'Sudan', 'Suriname', 'Svalbard and Jan Mayen Islands', 'Sweden', 'Switzerland', 'Syrian Arab Republic', 'Tajikistan', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu', 'Uganda', 'Ukraine', 'United Arab Emirates', 'The United Kingdom', 'United Republic of Tanzania', 'United States Minor Outlying Islands', 'United States Virgin Islands', 'United States of America', 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Venezuela (Bolivarian Republic of)', 'Viet Nam', 'Wallis and Futuna', 'Western Sahara', 'Yemen', 'Zambia', 'Zimbabwe', 'Sint Maarten']\r\n\r\n\r\nexport const plotWhat = [\r\n    \"Plot All Stats\",\r\n    \"New Cases Reported/Day\",\r\n    \"Total Cases Reported\",\r\n    \"New Deaths Reported/Day\",\r\n    \"Total Deaths Reported\",\r\n]\r\n\r\n\r\nexport const plotType = [\r\n    \"Line Plot\",\r\n    \"Bar Plot\"\r\n]\r\n\r\nexport const mapping = {\r\n    \"New Cases Reported/Day\": \"new_cases\",\r\n    \"Total Cases Reported\": 'total_cases',\r\n    \"New Deaths Reported/Day\": 'new_deaths',\r\n    \"Total Deaths Reported\": 'total_deaths',\r\n    \"Line Plot\": 'line',\r\n    \"Bar Plot\": 'bar',\r\n    \"Plot All Stats\": 'all'\r\n}\r\n\r\nexport const continents = [\r\n    \"Asia\", 'Africa', \"North America\", \"South America\", \"Europe\", \"Oceania\"\r\n]\r\n\r\nexport const color_config = {\r\n    'new_deaths' : {\r\n        'bg' : 'rgb(51, 20, 39)',\r\n        'text' : 'rgb(253, 7, 58)',\r\n        'heading': \"Death Statistics\"\r\n    },\r\n\r\n    'new_cases': {\r\n        'bg' : 'rgb(21,29,51)',\r\n        'text' : 'rgb(0, 123, 253)',\r\n        'heading': \"Case Statistics\"\r\n    },\r\n\r\n    'total_cases' : {\r\n        'bg' : 'rgb(24, 40, 41)',\r\n        'text': 'rgb(40, 166, 69)',\r\n        'heading': \"Total Cases Reported\"\r\n    },\r\n\r\n    'total_deaths' : {\r\n        'bg' : 'rgb(28, 28, 43)',\r\n        'text': 'rgb(200, 200, 200)',\r\n        'heading': \"Total Deaths Reported\"\r\n    }\r\n}","import React from 'react'\r\nimport { color_config } from '../constants'\r\n\r\nconst ShowDataComponent = ({ dataType, data, c }) => {\r\n    let content\r\n    const divStyles = {\r\n        backgroundColor: color_config[dataType]['bg'],\r\n        color: color_config[dataType]['text'],\r\n        width: '40%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: '400px',\r\n        borderRadius: '10px',\r\n        marginRight: '2rem',\r\n        boxShadow: `0 0 1rem ${color_config[dataType]['text']}`\r\n\r\n    }\r\n\r\n    if (dataType === 'new_cases') {\r\n        content = (\r\n            <>\r\n            <div className = 'mb-3'>\r\n                <div>\r\n                    <strong>First Case reported on</strong>\r\n                </div>\r\n                <div>{data.first_new_cases_date.replace('00:00:00 GMT', '')}</div>\r\n            </div>\r\n            \r\n            <div className = 'mb-3'>\r\n                <div>\r\n                    <strong>Maximum Cases Reported in a Day</strong>\r\n                </div>\r\n                <div >{data.maximum}</div>\r\n            </div>\r\n\r\n\r\n            <div className='mb-3'>\r\n                <div>\r\n                    <strong>Maximum Cases in a Day Reported on</strong>\r\n                </div>\r\n                <div>{data.max_new_cases_date.replace('00:00:00 GMT', '')}</div>\r\n            </div>\r\n\r\n\r\n            <div className='mb-3'>\r\n                <div>\r\n                    <strong>Total Cases</strong>\r\n                </div>\r\n                <div>{data.total}</div>\r\n            </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n    else if (dataType === 'new_deaths') {\r\n        content = (\r\n            <>\r\n            <div className = 'mb-3'>\r\n                <div>\r\n                    <strong>First Death reported on</strong>\r\n                </div>\r\n                <div>{data.first_new_deaths_date.replace('00:00:00 GMT', '')}</div>\r\n            </div>\r\n            \r\n            <div className = 'mb-3'>\r\n                <div>\r\n                    <strong>Maximum Deaths Reported in a Day</strong>\r\n                </div>\r\n                <div >{data.maximum}</div>\r\n            </div>\r\n\r\n\r\n            <div className='mb-3'>\r\n                <div>\r\n                    <strong>Maximum Deaths in a Day Reported on</strong>\r\n                </div>\r\n                <div>{data.max_new_deaths_date.replace('00:00:00 GMT', '')}</div>\r\n            </div>\r\n\r\n            <div className='mb-3'>\r\n                <div>\r\n                    <strong>Cumulative Deaths</strong>\r\n                </div>\r\n                <div>{data.total}</div>\r\n            </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style = {divStyles} className = 'col-10 col-md-9 col-lg-5 p-5'>\r\n            {   c === 'global' ? \r\n                <h3 className = 'mb-3'>Global {color_config[dataType].heading}</h3>\r\n                :\r\n                <h3 className = 'mb-3'>{color_config[dataType].heading} for {c}</h3>\r\n            }\r\n            <div style = {{ \r\n                display:'flex', \r\n                flexDirection: 'column',\r\n                alignItems: 'space-between',\r\n                justifyContent: 'space-between' \r\n            }}>\r\n                {content}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowDataComponent\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { clearDataFromState, getContinentData, getCountryData } from '../actions/mainActions';\r\nimport { countries, plotType, plotWhat, mapping, continents } from \"../constants\";\r\n\r\nimport '../styles/CountryFormStyles.css'\r\nimport ShowDataComponent from './ShowDataComponent';\r\n\r\nconst CountryFormComponent = ({ isCountry }) => {\r\n    const initial = isCountry ? countries[0] : continents[0]\r\n\r\n    const [c, setC] = useState('')\r\n    const [pws, setPws] = useState('')\r\n    const [pts, setPts] = useState('')\r\n    const [cArray, setCArray] = useState([])\r\n\r\n    const [country, setCountry] = useState(initial)\r\n    const [plotWhatState, setPlotWhatState] = useState(plotWhat[0])\r\n    const [plotTypeState, setPlotTypeState] = useState(plotType[0])\r\n    const [showImage, setShowImage] = useState(false)\r\n\r\n    const windowWidth = window.innerWidth\r\n\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.data)\r\n\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        // make some checks here\r\n        if ( cArray.length > 1 && mapping[plotWhatState] === 'all' ) {\r\n            console.log('Error')\r\n        }\r\n\r\n        else {\r\n            setShowImage(true)\r\n            setC(country.toLowerCase())\r\n            setPws(plotWhatState)\r\n            setPts(plotTypeState) \r\n\r\n            isCountry ?\r\n            dispatch(getCountryData(country.toLowerCase()))\r\n            :\r\n            dispatch(getContinentData(country.toLowerCase()))\r\n        }\r\n    }\r\n\r\n    const pushToArrayC = (e) => {\r\n        setCountry(e.target.value)\r\n        \r\n        if (mapping[plotWhatState] !== 'all')\r\n            setCArray([...cArray, e.target.value])\r\n    }\r\n\r\n    const popFromArrayC = (e) => {\r\n        setCArray(cArray.filter(c => c !== e.target.innerText))\r\n    }\r\n\r\n    const imageStyle = {\r\n        width: windowWidth * 0.95\r\n    }\r\n\r\n    const join = () => {\r\n        let s = ''\r\n        for (let i = 1; i < cArray.length - 1; i++) {\r\n            s += cArray[i] + ','\r\n        }\r\n\r\n        return cArray[0] + ',' + s + cArray[cArray.length - 1]\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(clearDataFromState())\r\n    }, [])\r\n\r\n    return (\r\n        <div style = {{ width: '100%' }}>\r\n\r\n        <form onSubmit = {submitHandler} className = 'mb-5 container'>\r\n        <div className = 'form-row'>\r\n                { isCountry ?\r\n                    <div className = 'form-group col-md-5'>\r\n\r\n                        <label htmlFor='country'>Select Country</label>\r\n                        <select \r\n                            className = 'form-control'\r\n                            onChange = {pushToArrayC}\r\n                            style = {{\r\n                                backgroundColor: \"transparent\",\r\n                                color: 'white'\r\n                            }}\r\n                        >\r\n                            {\r\n                                countries.map((country, index) => <option key = {index} style = {{\r\n                                    backgroundColor: 'rgb(14, 22, 29)',\r\n                                    color: \"white\"\r\n                                }}>{country}</option>)\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                : \r\n                    <div className = 'form-group col-md-5'>\r\n\r\n                        <label htmlFor='country'>Select Continent</label>\r\n                        <select \r\n                            className = 'form-control'\r\n                            onChange = {pushToArrayC}\r\n                            style = {{\r\n                                backgroundColor: \"transparent\",\r\n                                color: 'white'\r\n                            }}\r\n                        >\r\n                            {\r\n                                continents.map((cont, index) => <option key = {index} style = {{\r\n                                    backgroundColor: 'rgb(14, 22, 29)',\r\n                                    color: \"white\"\r\n                                }}>{cont}</option>)\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                }\r\n\r\n            <div className = 'form-group col-md-3'>\r\n                <label htmlFor='country'>Select Plot</label>\r\n                <select \r\n                    className = 'form-control'\r\n                    onChange = {(e) => setPlotWhatState(e.target.value)}\r\n                    style = {{\r\n                        backgroundColor: \"transparent\",\r\n                        color: 'white'\r\n                    }}\r\n                >\r\n                    {\r\n                        plotWhat.map((p, index) => \r\n                            <option key = {index} style = {{\r\n                                backgroundColor: 'rgb(14, 22, 29)',\r\n                                color: \"white\"\r\n                            }}>{p}</option>\r\n                        )\r\n                    }\r\n                </select>\r\n            </div>\r\n\r\n            <div className = 'form-group col-md-3'>\r\n                <label htmlFor='country'>Select Plot Type</label>\r\n                <select \r\n                    className = 'form-control'\r\n                    onChange = {(e) => setPlotTypeState(e.target.value)}\r\n                    style = {{\r\n                        backgroundColor: \"transparent\",\r\n                        color: 'white'\r\n                    }}\r\n                >\r\n                    {\r\n                        plotType.map((p, i) => <option key = {i} style = {{\r\n                            backgroundColor: 'rgb(14, 22, 29)',\r\n                            color: \"white\"\r\n                        }}>{p}</option>)\r\n                    }\r\n                </select>\r\n            </div>\r\n\r\n        </div>\r\n        <div className = 'form-row'>\r\n            <button \r\n                type = 'submit' \r\n                className='btn btn-outline-primary col-md-2'>Plot Data</button>\r\n        </div>\r\n        \r\n        </form>\r\n        \r\n        <div className = 'container' style = {{\r\n            display: 'flex',\r\n            justifyContent: 'flex-start'\r\n        }}\r\n        >\r\n            {\r\n                cArray.length > 0 && cArray.map((c1, i) => (\r\n                    <p  \r\n                        id = 'selected-to-compare'\r\n                        key = {i} \r\n                        style = {{\r\n                            color: 'rgb(51, 161, 254)',\r\n                            backgroundColor: 'rgba(51, 161, 254, 0.2)',\r\n                            borderRadius: '5px',\r\n                            padding: '0.5rem',\r\n                            marginRight: '0.5rem'\r\n                        }}\r\n                        onClick = {popFromArrayC}\r\n                    >\r\n                        {c1}\r\n                    </p>\r\n                ))\r\n            }\r\n        </div>\r\n\r\n        <div style = {{ \r\n            display: 'flex', \r\n            flexDirection: 'column', \r\n            alignItems: 'center', \r\n            marginBottom: '3rem'\r\n            }}\r\n        >\r\n        {\r\n            mapping[pws] === 'all' && \r\n            <h1 style={{color: 'white', margin: '2rem auto'}}>Stats for {c.toUpperCase()}</h1>\r\n        }\r\n\r\n        {   showImage ?\r\n\r\n                isCountry ? \r\n                    cArray.length > 1 ?\r\n                        <img\r\n                            src = {\r\n                                `api/plotdata/countries/${mapping[pws]}/${mapping[pts]}?countries=${join()}`\r\n                            }\r\n                            alt = {`${c}-${mapping[pws]}-${mapping[pts]}`}\r\n                            style = {imageStyle} \r\n                        />\r\n                        :\r\n                        <img \r\n                            src = {`api/plotdata/country/${c}/${mapping[pws]}/${mapping[pts]}`} \r\n                            alt = {`${c}-${mapping[pws]}-${mapping[pts]}`}\r\n                            style= { mapping[pws] === 'all' ? imageStyle : {} }\r\n                        />\r\n\r\n                    :\r\n\r\n                // isCountry == false\r\n                cArray.length > 1 ? \r\n\r\n                <img\r\n                    src = {`api/plotdata/continents/${mapping[pws]}/${mapping[pts]}?conts=${join()}`}\r\n                    alt = {`${c}-${mapping[pws]}-${mapping[pts]}`}\r\n                    style = {imageStyle} \r\n                />\r\n                \r\n                :\r\n\r\n                <img \r\n                    src = {`api/plotdata/continent/${c}/${mapping[pws]}/${mapping[pts]}`} \r\n                    alt = {`${c}-${mapping[pws]}-${mapping[pts]}`}\r\n                    style= { mapping[pws] === 'all' ? imageStyle : {} }\r\n                />\r\n\r\n            :\r\n\r\n            null\r\n\r\n        }\r\n\r\n        </div>\r\n\r\n        <div \r\n            className='container'\r\n        >\r\n            <div \r\n                className = 'row'\r\n                style = {{\r\n                display: \"flex\",\r\n                justifyContent: 'center'\r\n            }}\r\n            >\r\n                {   Object.keys(data).length > 0 && \r\n                    ['new_cases', 'new_deaths'].map(\r\n                        (k, index) =>\r\n                        <ShowDataComponent key={index} dataType = {k} data = {data[k]} c = {country} /> \r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryFormComponent\r\n","import React from 'react'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport '../styles/NavbarStyles.css'\r\n\r\nconst NavbarComponent = ({ match }) => {\r\n\r\n    return (\r\n        <nav>\r\n            <Link to = '/' \r\n                className = {`link ${match.url === '/' ? 'active' : ''}`}>\r\n                <p>\r\n                    Home\r\n                </p>\r\n            </Link>\r\n\r\n            <Link to = '/country' \r\n                className = {`link ${match.url === '/country' ? 'active' : ''}`}>\r\n                <p>\r\n                    Country Data\r\n                </p>\r\n            </Link>\r\n            <Link to = '/continent' className = {`link ${match.url === '/continent' ? 'active' : ''}`}>\r\n                <p>\r\n                    Continent Data\r\n                </p>\r\n            </Link>\r\n            <Link to = '/global' className = {`link ${match.url === '/global' ? 'active' : ''}`}>\r\n                <p>\r\n                    Global Data\r\n                </p>\r\n            </Link>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default withRouter(NavbarComponent)\r\n","import React from 'react'\r\n\r\nimport CountryFormComponent from '../components/CountryFormComponent'\r\nimport NavbarComponent from '../components/NavbarComponent'\r\n\r\nconst CountryScreen = () => {\r\n    const mainStyle = { width: '100%' }\r\n\r\n    return (\r\n        <div style = {mainStyle}  className = 'mb-5'>\r\n            <NavbarComponent />\r\n\r\n            <CountryFormComponent isCountry />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryScreen\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { clearDataFromState, getGlobalData } from '../actions/mainActions';\r\nimport { plotType, plotWhat, mapping } from \"../constants\";\r\nimport ShowDataComponent from './ShowDataComponent';\r\n\r\nconst GlobalFormComponent = () => {\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.data)\r\n\r\n    const [pws, setPws] = useState('')\r\n    const [pts, setPts] = useState('')\r\n\r\n    const [plotWhatState, setPlotWhatState] = useState(plotWhat[0])\r\n    const [plotTypeState, setPlotTypeState] = useState(plotType[0])\r\n    const [showImage, setShowImage] = useState(false)\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        setShowImage(true)\r\n        setPws(plotWhatState)\r\n        setPts(plotTypeState)  \r\n\r\n        dispatch(getGlobalData())\r\n    }\r\n\r\n    const windowWidth = window.innerWidth\r\n    const windowHeight = window.innerHeight\r\n\r\n    const imageStyle = {\r\n        width: windowWidth * 0.95, height: windowHeight * 0.95 \r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(clearDataFromState())\r\n    }, [])\r\n\r\n    return (\r\n        <div style = {{ width: '100%' }}>\r\n        <form onSubmit = {submitHandler} className = 'mb-5 container'>\r\n        <div className = 'form-row'>\r\n            \r\n            <div className = 'form-group col-md-3'>\r\n                <label htmlFor='country'>Select Plot</label>\r\n                <select \r\n                    className = 'form-control'\r\n                    onChange = {(e) => setPlotWhatState(e.target.value)}\r\n                    style = {{\r\n                        backgroundColor: \"transparent\",\r\n                        color: 'white'\r\n                    }}\r\n                >\r\n                    {\r\n                        plotWhat.map((p, index) => \r\n                            <option key = {index} style = {{\r\n                                backgroundColor: 'rgb(14, 22, 29)',\r\n                                color: \"white\"\r\n                            }}>{p}</option>\r\n                        )\r\n                    }\r\n                </select>\r\n            </div>\r\n\r\n            <div className = 'form-group col-md-3'>\r\n                <label htmlFor='country'>Select Plot Type</label>\r\n                <select \r\n                    className = 'form-control'\r\n                    onChange = {(e) => setPlotTypeState(e.target.value)}\r\n                    style = {{\r\n                        backgroundColor: \"transparent\",\r\n                        color: 'white'\r\n                    }}\r\n                >\r\n                    {\r\n                        plotType.map((p, i) => <option key = {i} style = {{\r\n                            backgroundColor: 'rgb(14, 22, 29)',\r\n                            color: \"white\"\r\n                        }}>{p}</option>)\r\n                    }\r\n                </select>\r\n            </div>\r\n\r\n        </div>\r\n        <div className = 'form-row'>\r\n            <button \r\n                type = 'submit' \r\n                className='btn btn-outline-primary col-md-2'>Plot Data</button>\r\n        </div>\r\n        \r\n        </form>\r\n        \r\n        <div style = {{ \r\n            display: 'flex', \r\n            flexDirection: 'column', \r\n            alignItems: 'center', \r\n            marginBottom: '3rem'\r\n            }}\r\n        >\r\n\r\n        {\r\n            showImage && \r\n            <img \r\n                src = {`api/plotdata/global/${mapping[pws]}/${mapping[pts]}`} \r\n                alt = {`global-${mapping[pws]}-${mapping[pts]}`}\r\n                style= { mapping[pws] === 'all' ? imageStyle : {} }\r\n            />\r\n        }\r\n        </div>\r\n\r\n        <div \r\n            className='container'\r\n        >\r\n            <div \r\n                className = 'row'\r\n                style = {{\r\n                display: \"flex\",\r\n                justifyContent: 'center'\r\n            }}\r\n            >\r\n                {   Object.keys(data).length > 0 && \r\n                    ['new_cases', 'new_deaths'].map(\r\n                        (k, index) =>\r\n                        <ShowDataComponent key={index} dataType = {k} data = {data[k]} c = 'global' /> \r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GlobalFormComponent\r\n","import React from 'react'\r\nimport GlobalFormComponent from '../components/GlobalFormComponent'\r\n\r\nimport NavbarComponent from '../components/NavbarComponent'\r\nimport '../styles/GlobalScreenStyles.css'\r\n\r\n\r\nconst GlobalScreen = () => {\r\n    return (\r\n        <div  className = 'mb-5'>\r\n            <NavbarComponent />\r\n\r\n            <GlobalFormComponent />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GlobalScreen\r\n","import React from 'react'\r\nimport CountryFormComponent from '../components/CountryFormComponent'\r\nimport NavbarComponent from '../components/NavbarComponent'\r\n\r\nconst ContinentScreen = () => {\r\n    return (\r\n        <div className = 'mb-5'>\r\n            <NavbarComponent />\r\n            <CountryFormComponent isCountry = {false} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContinentScreen\r\n","import React, {useState, useEffect} from 'react'\r\nimport NavbarComponent from '../components/NavbarComponent'\r\nimport axios from 'axios'\r\n// import mpld3 from 'mpld3'\r\n\r\nconst HomeScreen = () => {\r\n    const [figJson, setFigJson] = useState('')\r\n\r\n    const fetchData = async () => {\r\n        const { data } = await axios.get('/api')\r\n        console.log(data)\r\n        setFigJson(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <NavbarComponent />\r\n            <p>\r\n                {figJson}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import React from 'react' \nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport CountryScreen from './screens/CountryScreen';\nimport GlobalScreen from './screens/GlobalScreen';\nimport ContinentScreen from './screens/ContinentScreen';\nimport HomeScreen from './screens/HomeScreen';\n\nfunction App() {\n\n    return (\n        <BrowserRouter>\n            <Route \n                exact path = '/'\n                render = { () => <HomeScreen /> }\n            />\n\n            <Route \n                exact path = '/country'\n                render = { () => <CountryScreen /> }\n            />\n\n            <Route \n                exact path = '/global'\n                render = { () => <GlobalScreen /> }\n            />\n\n            <Route \n                exact path = '/continent'\n                render = { () => <ContinentScreen /> }\n            />\n\n        </BrowserRouter>\n            \n        \n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, createStore } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { mainReducer } from './reducers/mainReducer'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nconst initialState = {\r\n    data : {}\r\n}\r\n\r\nconst store = createStore(\r\n    mainReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\n\r\nexport default store","export const mainReducer = (state = { data : {} }, action) => {\r\n    switch (action.type) {\r\n        case 'COUNTRY_DATA_REQUEST':\r\n            return { data: action.payload }\r\n\r\n        case 'CONTINENT_DATA_REQUEST':\r\n            return { data : action.payload }\r\n\r\n        case 'GLOBAL_DATA_REQUEST':\r\n            return { data : action.payload }\r\n\r\n        case 'CLEAR_DATA_FROM_STATE':\r\n            return { data: {} }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store = {store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n    ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}